package com.herenit.mobilenurse.datastore.orm.greendao.daopackage;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.herenit.mobilenurse.criteria.entity.MultiListMenuItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MULTI_LIST_MENU_ITEM".
*/
public class MultiListMenuItemDao extends AbstractDao<MultiListMenuItem, Long> {

    public static final String TABLENAME = "MULTI_LIST_MENU_ITEM";

    /**
     * Properties of entity MultiListMenuItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property DocType = new Property(1, String.class, "docType", false, "DOC_TYPE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property Path = new Property(4, String.class, "path", false, "PATH");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property HasSubItem = new Property(6, boolean.class, "hasSubItem", false, "HAS_SUB_ITEM");
        public final static Property Selectable = new Property(7, boolean.class, "selectable", false, "SELECTABLE");
    }


    public MultiListMenuItemDao(DaoConfig config) {
        super(config);
    }
    
    public MultiListMenuItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MULTI_LIST_MENU_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"DOC_TYPE\" TEXT NOT NULL ," + // 1: docType
                "\"NAME\" TEXT," + // 2: name
                "\"CODE\" TEXT NOT NULL ," + // 3: code
                "\"PATH\" TEXT NOT NULL ," + // 4: path
                "\"CONTENT\" TEXT," + // 5: content
                "\"HAS_SUB_ITEM\" INTEGER NOT NULL ," + // 6: hasSubItem
                "\"SELECTABLE\" INTEGER NOT NULL );"); // 7: selectable
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MULTI_LIST_MENU_ITEM_DOC_TYPE_DESC_CODE_DESC ON \"MULTI_LIST_MENU_ITEM\"" +
                " (\"DOC_TYPE\" DESC,\"CODE\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MULTI_LIST_MENU_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MultiListMenuItem entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getDocType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindString(4, entity.getCode());
        stmt.bindString(5, entity.getPath());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
        stmt.bindLong(7, entity.getHasSubItem() ? 1L: 0L);
        stmt.bindLong(8, entity.getSelectable() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MultiListMenuItem entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getDocType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindString(4, entity.getCode());
        stmt.bindString(5, entity.getPath());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
        stmt.bindLong(7, entity.getHasSubItem() ? 1L: 0L);
        stmt.bindLong(8, entity.getSelectable() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MultiListMenuItem readEntity(Cursor cursor, int offset) {
        MultiListMenuItem entity = new MultiListMenuItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // docType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // code
            cursor.getString(offset + 4), // path
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.getShort(offset + 6) != 0, // hasSubItem
            cursor.getShort(offset + 7) != 0 // selectable
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MultiListMenuItem entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDocType(cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.getString(offset + 3));
        entity.setPath(cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHasSubItem(cursor.getShort(offset + 6) != 0);
        entity.setSelectable(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MultiListMenuItem entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MultiListMenuItem entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MultiListMenuItem entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
